// ignore_for_file: prefer_const_constructors

import 'dart:developer';
import 'dart:io';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:qr_code_scanner/qr_code_scanner.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

void main() async {
  runApp(const MaterialApp(home: MyHome()));
}

beforeInitial() async {
  try {
    var response = await http.get(
      Uri.parse("http://13.213.144.190:1880/api/flutter/get"),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Basic YWRtaW46bWVpc21laXM=',
      },
    );
    Map<String, dynamic> user = jsonDecode(response.body);
    var data =
        User(username: user['username'], password: user['password'].toString());
    return user;
  } catch (e) {
    print(e);
  }
}

class MyHome extends StatelessWidget {
  const MyHome({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<dynamic>(
      future: beforeInitial(), // function where you call your api
      builder: (BuildContext context, AsyncSnapshot<dynamic> snapshot) {
        // AsyncSnapshot<Your object type>
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: Text('Please wait get API...'));
        } else {
          if (snapshot.hasError)
            // ignore: curly_braces_in_flow_control_structures
            return Center(child: Text('Error: ${snapshot.error}'));
          else
            // ignore: curly_braces_in_flow_control_structures
            return Scaffold(
              appBar: AppBar(title: const Text('Login Page')),
              body: Center(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    TextFormField(initialValue: '${snapshot.data['username']}'),
                    TextFormField(initialValue: '${snapshot.data['password']}'),
                    Center(
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (context) => const QRViewExample(),
                          ));
                        },
                        child: const Text('QR Code system'),
                      ),
                    ),
                  ],
                ),
              ),
            );
          // return Center(
          //     child: new Text(
          //         '${snapshot.data['username']}')); // snapshot.data  :- get your object which is pass from your downloadData() function
        }
      },
    );
  }

  // @override
  // Widget build(BuildContext context) {
  //   return Scaffold(
  //     appBar: AppBar(title: const Text('Login Page')),
  //     body: Center(
  //       child: Column(
  //         crossAxisAlignment: CrossAxisAlignment.center,
  //         children: <Widget>[
  //           // new TextField(
  //           //   // The TextField is first built, the controller has some initial text,
  //           //   // which the TextField shows. As the user edits, the text property of
  //           //   // the controller is updated.
  //           //   controller: data.username,
  //           // ),
  //           TextFormField(
  //             decoration: const InputDecoration(
  //               hintText: 'Username',
  //             ),
  //             // validator: (String? value) {
  //             //   if (value == null || value.isEmpty) {
  //             //     return 'Please enter some text';
  //             //   }
  //             //   return null;
  //             // },
  //           ),
  //           TextFormField(
  //             decoration: const InputDecoration(
  //               hintText: 'Password',
  //             ),
  //           ),
  //           Center(
  //             child: ElevatedButton(
  //               onPressed: () {
  //                 Navigator.of(context).push(MaterialPageRoute(
  //                   builder: (context) => const QRViewExample(),
  //                 ));
  //               },
  //               child: const Text('QR Code system'),
  //             ),
  //           ),
  //         ],
  //       ),
  //     ),
  //   );
  // }
}

class User {
  String? username;
  String? password;

  User({this.username, this.password});

  factory User.fromJson(Map<String, dynamic> jsonData) {
    return User(username: jsonData['username'], password: jsonData['password']);
  }
}

class QRViewExample extends StatefulWidget {
  const QRViewExample({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _QRViewExampleState();
}

class myArrayBuffer {
  String? date;
  String? time;

  myArrayBuffer({this.date, this.time});

  factory myArrayBuffer.fromJson(Map<String, dynamic> jsonData) {
    return myArrayBuffer(date: jsonData['date'], time: jsonData['time']);
  }

  static Map<String, dynamic> toMap(myArrayBuffer myArr) => {
        'date': myArr.date,
        'time': myArr.time,
      };

  static String encode(List<myArrayBuffer> myArr) => json.encode(
        myArr
            .map<Map<String, dynamic>>((music) => myArrayBuffer.toMap(music))
            .toList(),
      );

  static List<myArrayBuffer> decode(String myArr) =>
      (json.decode(myArr) as List<dynamic>)
          .map<myArrayBuffer>((item) => myArrayBuffer.fromJson(item))
          .toList();
}

class MyStorage {
  saveToLocalStorage(data) {
    data.toJSONEncodable();
  }
}

class _QRViewExampleState extends State<QRViewExample> {
  Barcode? result;
  QRViewController? controller;
  final GlobalKey qrKey = GlobalKey(debugLabel: 'QR');
  List<myArrayBuffer>? myArrayObject = [];
  TextEditingController dateController = new TextEditingController();
  TextEditingController timeController = new TextEditingController();
  final mySaveLocal = new MyStorage();
  // In order to get hot reload to work we need to pause the camera if the platform
  // is android, or resume the camera if the platform is iOS.
  @override
  void reassemble() {
    super.reassemble();
    if (Platform.isAndroid) {
      controller!.pauseCamera();
    }
    controller!.resumeCamera();
  }

  postData(data) async {
    final String encodedData = myArrayBuffer.encode(data!);
    try {
      var response = await http.post(
          Uri.parse("http://13.213.144.190:1880/api/flutter/post"),
          headers: <String, String>{
            'Content-Type': 'application/json; charset=UTF-8',
            'Authorization': 'Basic YWRtaW46bWVpc21laXM=',
          },
          // body: jsonEncode(data));
          body: encodedData);
      print(response.body);
    } catch (e) {
      print(e);
    }
  }

  getData() async {
    try {
      var response = await http
          .get(Uri.parse("http://13.213.144.190:1880/api/flutter/get"));
      print(response.body);
    } catch (e) {
      print(e);
    }
  }

  getSharedPreferences() async {
    final prefs = await SharedPreferences.getInstance();
    final String? newDatas = prefs.getString('data');
    if (newDatas != null) {
      final List<myArrayBuffer> newData = myArrayBuffer.decode(newDatas);
      return newData;
    } else {
      return null;
    }
  }

  saveStringValue(data) async {
    dateController.text = "";
    timeController.text = "";
    final prefs = await SharedPreferences.getInstance();
    // final success = prefs.remove('data');
    final String? newDatas = prefs.getString('data');
    print(newDatas);
    if (newDatas != null) {
      final List<myArrayBuffer> newData = myArrayBuffer.decode(newDatas);
      print(newData.length);
      if (newData.length > 0) {
        newData.add((data));
        final String encodedData = myArrayBuffer.encode(newData);
        await prefs.setString('data', encodedData);
      } else {
        myArrayObject?.add((data));
        final String encodedData = myArrayBuffer.encode(myArrayObject!);
        await prefs.setString('data', encodedData);
      }
    } else {
      myArrayObject?.add((data));
      final String encodedData = myArrayBuffer.encode(myArrayObject!);
      await prefs.setString('data', encodedData);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: <Widget>[
          Expanded(flex: 4, child: _buildQrView(context)),
          Expanded(
            flex: 1,
            child: FittedBox(
              fit: BoxFit.contain,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: <Widget>[
                  if (result != null)
                    Text(
                        'Barcode Type: ${describeEnum(result!.format)}   Data: ${result!.code}')
                  else
                    const Text('Scan a code'),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            if (result == null) {
                              showDialog<String>(
                                context: context,
                                builder: (BuildContext context) => AlertDialog(
                                  title: const Text('Data Check'),
                                  content: Text('Not found data to sending'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () async {
                                        Navigator.pop(context, 'Cancel');
                                      },
                                      child: const Text('Cancel'),
                                    ),
                                  ],
                                ),
                              );
                            } else {
                              var data = {
                                "id": result!.code,
                                "value": "abc-def-ghi"
                              };
                              await postData(data);
                            }
                          },
                          child: const Text('send barcode data',
                              style: TextStyle(fontSize: 20)),
                        ),
                      ),
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                            onPressed: () async {
                              await controller?.flipCamera();
                              setState(() {});
                            },
                            child: FutureBuilder(
                              future: controller?.getCameraInfo(),
                              builder: (context, snapshot) {
                                if (snapshot.data != null) {
                                  return Text(
                                      'Camera facing ${describeEnum(snapshot.data!)}');
                                } else {
                                  return const Text('loading');
                                }
                              },
                            )),
                      )
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            showDialog<String>(
                              context: context,
                              builder: (BuildContext context) => AlertDialog(
                                title: const Text('Add Data'),
                                actions: <Widget>[
                                  TextFormField(
                                    controller: dateController,
                                    decoration: const InputDecoration(
                                      hintText: 'Date',
                                    ),
                                    validator: (String? value) {
                                      if (value == null || value.isEmpty) {
                                        return 'Please enter some text';
                                      }
                                      return null;
                                    },
                                  ),
                                  TextFormField(
                                    controller: timeController,
                                    decoration: const InputDecoration(
                                      hintText: 'Time',
                                    ),
                                    validator: (String? value) {
                                      if (value == null || value.isEmpty) {
                                        return 'Please enter some text';
                                      }
                                      return null;
                                    },
                                  ),
                                  Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      children: <Widget>[
                                        TextButton(
                                          onPressed: () async {
                                            print(timeController.text);
                                            print(dateController.text);
                                            if (dateController.text != null &&
                                                timeController.text != null) {
                                              // var data = myArrayBuffer(
                                              //     date: "29/09/2022",
                                              //     time: "19:29");
                                              var data = myArrayBuffer(
                                                  date: dateController.text,
                                                  time: timeController.text);
                                              saveStringValue(data);
                                              await mySaveLocal
                                                  .saveToLocalStorage(data);
                                            }
                                            Navigator.pop(context, 'Save');
                                          },
                                          child: const Text('Save'),
                                        ),
                                        TextButton(
                                          onPressed: () async {
                                            Navigator.pop(context, 'Cancel');
                                          },
                                          child: const Text('Cancel'),
                                        ),
                                      ]),
                                ],
                              ),
                            );
                          },
                          child: const Text('record data',
                              style: TextStyle(fontSize: 20)),
                          // onPressed: () async {
                          //   await controller?.toggleFlash();
                          //   setState(() {});
                          // },
                          // child: FutureBuilder(
                          //   future: controller?.getFlashStatus(),
                          //   builder: (context, snapshot) {
                          //     return Text('Flash: ${snapshot.data}');
                          //   },)
                        ),
                      ),
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            var datas = await getSharedPreferences();
                            if (datas != null) {
                              // print(datas.length);
                              // datas!.forEach((item) {
                              //   print('date: ${item.date}, time: ${item.time}');
                              // });
                              showDialog<String>(
                                context: context,
                                builder: (BuildContext context) => AlertDialog(
                                  title: const Text('Data in Record'),
                                  content: ListView.builder(
                                      itemCount: datas.length,
                                      itemBuilder: (context, index) {
                                        return ListTile(
                                          title: Text('index : ${index + 1}'),
                                          subtitle: Text(
                                              'date : ${datas[index].date} \ntime : ${datas[index].time}'),
                                        );
                                      }),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context, 'Cancel'),
                                      child: const Text('Cancel'),
                                    ),
                                  ],
                                ),
                              );
                            } else {
                              showDialog<String>(
                                context: context,
                                builder: (BuildContext context) => AlertDialog(
                                  title: const Text('Data Show'),
                                  content: Text('Not found data!!!'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context, 'Cancel'),
                                      child: const Text('Cancel'),
                                    ),
                                  ],
                                ),
                              );
                            }
                          },
                          child: const Text('read data',
                              style: TextStyle(fontSize: 20)),
                          // onPressed: () async {
                          //   await controller?.toggleFlash();
                          //   setState(() {});
                          // },
                          // child: FutureBuilder(
                          //   future: controller?.getFlashStatus(),
                          //   builder: (context, snapshot) {
                          //     return Text('Flash: ${snapshot.data}');
                          //   },)
                        ),
                      ),
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            var datas = await getSharedPreferences();
                            if (datas != null) {
                              await postData(datas);
                            }
                          },
                          child: const Text('send record data',
                              style: TextStyle(fontSize: 20)),
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            await controller?.pauseCamera();
                          },
                          child: const Text('pause',
                              style: TextStyle(fontSize: 20)),
                        ),
                      ),
                      Container(
                        margin: const EdgeInsets.all(8),
                        child: ElevatedButton(
                          onPressed: () async {
                            await controller?.resumeCamera();
                          },
                          child: const Text('resume',
                              style: TextStyle(fontSize: 20)),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          )
        ],
      ),
    );
  }

  Widget _buildQrView(BuildContext context) {
    // For this example we check how width or tall the device is and change the scanArea and overlay accordingly.
    var scanArea = (MediaQuery.of(context).size.width < 400 ||
            MediaQuery.of(context).size.height < 400)
        ? 150.0
        : 300.0;
    // To ensure the Scanner view is properly sizes after rotation
    // we need to listen for Flutter SizeChanged notification and update controller
    return QRView(
      key: qrKey,
      onQRViewCreated: _onQRViewCreated,
      overlay: QrScannerOverlayShape(
          borderColor: Colors.red,
          borderRadius: 10,
          borderLength: 30,
          borderWidth: 10,
          cutOutSize: scanArea),
      onPermissionSet: (ctrl, p) => _onPermissionSet(context, ctrl, p),
    );
  }

  void _onQRViewCreated(QRViewController controller) {
    setState(() {
      this.controller = controller;
    });
    controller.scannedDataStream.listen((scanData) {
      setState(() {
        result = scanData;
      });
    });
  }

  void _onPermissionSet(BuildContext context, QRViewController ctrl, bool p) {
    log('${DateTime.now().toIso8601String()}_onPermissionSet $p');
    if (!p) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('no Permission')),
      );
    }
  }

  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }
}
